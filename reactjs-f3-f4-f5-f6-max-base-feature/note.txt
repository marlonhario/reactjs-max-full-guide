Dependency Management Tools
    - npm or yarn
Bundler
    - Webpack
Compiler(Next-Gen JavaScript)
    - Babel + Preset

Need to install before building react app
    - nodejs
    - git 
    - nvm (optional)

    after installation
        : npm install -g create-react-app 
        : create-react-app proj_name
        : npm start

JSX Restriction
    - className - is the attribute used in jsx while in html used class
    - cannot return more than one main elements, it strictly return just one element and its child.
    - <React.Fragment></React.Fragment> - used this element if you dont want to use div as a parent element in your jsx
    - you should name your import component to uppercase the first letter because all lower case name ussaually used in html elements
    - use self closing tag component if you dont have any nested component
        e.g. 
            <Person />
    - use opening and closing tag if there is nested
        e.g.
            <Person></Person>
    - to access nested element in a tag you to call {props.children}
        e.g.
            <Person name="Manu" age="29">My hubbies: Racing</Person>
        e.g.
            return (<div>{props.children}</div>)


props - use in arguments when passing props in normal function function component
    e.g. 
        <Person name="Manu" age="29" />

this.props - use this when passing props into class-based function 
    e.g.
        class Person extends Component {
            render () {
                return <p>My name is {this.props}</p>;
            }
        }


state - is a special property used in class-base function
      - not availabel in normal function component
      - JavaScript object
      - special property

onClick events 

calling a function
    - use this.functionName - to call a function that is not executed after dom is render and it will wait untill some event happen
    - use this.functionName() - if you want to execute a function as soon as the dom render


Do not change state directly it will cause error
    e.g.
        this.state.persons[0].name = 'Maximilian';

setState - it is available when you extends component in your class function
         - use this to not to change or update the state
            e.g.
                // simple setState
                this.setState({
                    persons: [
                        { name: 'Oirah', age: 28 },
                        { name: 'Manu', age: 29 },
                        { name: 'Stephanie', age: 26 },
                    ]
                })
                 

passing reference method from class-base function into normal function
    e.g.
        <Person name={this.state.persons[1].name} 
                  age={this.state.persons[1].age}
                  click={this.switchNameHandler} />

        // and call it into normal function like: 
            <h1 onClick={props.click}></h1>

        // dont add aprenthesis in method passing into props like: becasue it would emmidiately invoke after dom load without trigger event
            <Person name={this.state.persons[1].name} 
                  age={this.state.persons[1].age}
                  click={this.switchNameHandler()} />

passing reference method with argument data from class-base function into normal function
    e.g. recommended way using bind
        switchNameHandler = (newName) => {
            // console.log('Was clicked');
            this.setState({
                persons: [
                    { name: newName, age: 28 },
                    { name: 'Manu', age: 29 },
                    { name: 'Stephanie', age: 26 },
                ]
            })
        }
        
        <button onClick={this.switchNameHandler.bind(this, 'Maximilian')}>Switch Name</button>

        // access into normal function =================
        <h1 onClick={props.click}></h1>

    e.g not recommended can cause ineffecient
        // alternative passing method by passing annymous function like :
        <button onClick={() => this.switchNameHandler('NOLRAM!!')}>Switch Name</button>    // annymous function


two way binding
    e.g.    
        nameChangeHandler = (event) => {
            this.setState({
            persons: [
                { name: 'Max', age: 28 },
                { name: event.target.value, age: 29 },
                { name: 'Stephanie', age: 26 },
            ]
            })
        }

        <Person name={this.state.persons[1].name} 
                  age={this.state.persons[1].age}
                  click={ () => this.switchNameHandler('NOLRAM!!')} 
                  changed={this.nameChangeHandler} />

        <input type="text" onChange={props.changed} value={props.name} />                   // two way bindingbecause: events triggerer and value has a props call


- event in function would automatically be passing in react 

- styling would be work on css and import it on you js file but this will affect globally even if you import with other component

- inline styling in JavaScript
    e.g.
         render() {
            const style = {
            backgroundColor: 'green',
            color: white,
            font: 'inherit',
            border: '1px solid blue',
            padding: '8px'
            }

            return (
                <React.Fragment>
                    
                    <button 
                        style={style}
                        onClick={this.switchNameHandler.bind(this, 'Maximilian')}>Switch Name</button>
                </React.Fragment>
            )
        }

    - property of a style woul be different e.g.
        - backgroundColor   // this react defining property using camelcase naming
        - background-color  // you could use this in react inline styling but you need to wrap it in quotes like 'background-color'
    - all value of a properties must be wrap in quotation in javascript
    - hovering is hard to apply in inline style javascript

=============================================================================================================
=============================================================================================================
===============================================Folder Four 4=================================================
=============================================================================================================


- to add comment in react return value
    e.g.
        {/* {<Person name={this.state.persons[2].name} 
                  age={this.state.persons[2].age} >Children elements</Person>} */}


- using if block in react will not work (like: if else)
    - intead use turnary operator (like: condition ? true : false)  > ternary is the default javascript construct


- we can interject javascript expression in JSX using curly braces

- another example on setState   
state = {
    persons: [
            { name: 'Max', age: 28 },
            { name: 'Manu', age: 29 },
            { name: 'Stephanie', age: 26 },
        ],
        otherState: 'some other value',
        showPersons: false
    }
    togglePersonHandler = () => {
        const doesShow = this.state.showPersons;
        this.setState({ showPersons: !doesShow });
    }

- rendering content conditionally this will important in challenge
    e.g.
        {
            this.state.showPersons ? 
                <div>
                <Person name={this.state.persons[0].name} 
                        age={this.state.persons[0].age} />
                <Person name={this.state.persons[1].name} 
                        age={this.state.persons[1].age}
                        click={ () => this.switchNameHandler('NOLRAM!!')} 
                        changed={this.nameChangeHandler} />
                {/* {<Person name={this.state.persons[2].name} 
                        age={this.state.persons[2].age} >Children elements</Person>} */}
                </div> : null
        }

- apply cleaner way of rendering content conditional in challenge

- you use if else outside the JSX

- map method handling arrays need to apply in challenge
    - warning - if you ever use map method in outputting lists you need to define some key
              - key - is react required to update state to track effeciently in the background
              - you need to defined your key at the parent element it is required
              - assigning key is ussually an id or something unique
              - index in array - is not a good key to use 

- outputting lists
    e.g.
        let persons = null;
        if ( this.state.showPersons ) {
            persons = (
                <div>
                    {this.state.persons.map(person => {
                        return <Person name={person.name} age={person.age} />
                    })}
                </div>
            );
        }


- note - if you ever add more than one arguments in arrow function you need to wrap it in parenthesis otherwise it's okay if no ()

- sample delete using state & lists 

    e.g. - but this sample is not recommended to use (because objects and arrays are reference type and its better to use high order methods)
        deletePersonHandler = (personIndex) => {
            const persons = this.state.persons;
            persons.splice(personIndex, 1);
            this.setState({persons: persons});
        }

        let persons = null;
        if ( this.state.showPersons ) {
            persons = (
                <div>
                {this.state.persons.map((person, index) => {
                    return <Person 
                            click={() => this.deletePersonHandler(index)}
                            name={person.name} 
                            age={person.age} />
                })}
            );
        }

    e.g. - a good pratice is :
        deletePersonHandler = (personIndex) => {
            // const persons = this.state.persons.slice();   // good practice
            const persons = [...this.state.persons];         // good practice using spread operator
            persons.splice(personIndex, 1);
            this.setState({persons: persons});
        }

- note - you always need to use immutable way when updating state
     - immutable methods
        : slice()
        : spread operator
        : map()
        : findIndex()
        : find()

- apply in challenge the input way to change the name using event and some other stuff




=============================================================================================================
=============================================================================================================
===============================================Folder Four 5=================================================
=============================================================================================================

- adding style dynamically in react
    e.g.
        render() {

            // inline javascript style
            const style = {
            backgroundColor: 'white',
            font: 'inherit',
            border: '1px solid blue',
            padding: '8px'
            }

            // cleaner way of content conditional
            let persons = null;
            if ( this.state.showPersons ) {
               
                style.backgroundColor = 'red';
            }

            return (
                <React.Fragment>
                    <button 
                        onClick={this.togglePersonHandler}>Toggle Person</button>
                </React.Fragment>
            )
        }

- adding classes and styles dynamically in react
    e.g.
        App.css
            .red {
                color: red;
            }

            .bold {
                color: white;
                background: red;
            }

        App.js
            render() {

                // let classes = ['red', 'bold'].join(' ');   // "red bold"
                const classes = [];
                if (this.state.persons.length <= 2) {
                classes.push('red'); // classes = ['red']
                }
                if (this.state.persons.length <= 1) {
                classes.push('bold'); // classes = ['red', 'bold']
                }

                return (
                    <React.Fragment>
                        <h1 className={classes.join(' ')}>hello world</h1>
                    </React.Fragment>
                )
            }

- adding pseudo selector like hover in react using third party library called radium 
    - radium is a popular libraries for react for adding pseudo selector and media queries
    - to install radium : npm install --save radium
    - to use radium you need to 
        - import it in your component
            - import Radium from 'radium';
        - wrap your export
            - export default Radium(App);
        - wrapping you export is called high order component  
        - warp all pseudo selecto into quote to work

    e.g.
        render() {

            // inline javascript style
            const style = {
                backgroundColor: 'white',
                font: 'inherit',
                border: '1px solid blue',
                padding: '8px',
                ':hover': {
                    backgroundColor: 'lightgreen',
                    color: 'black'
                }
            }

            // cleaner way of content conditional
            let persons = null;
            if ( this.state.showPersons ) {
               
                style.backgroundColor = 'red';
                style[':hover'] = {
                    backgroundColor: 'salmon',
                    color: 'black'
                }
            }

            return (
                <React.Fragment>
                    <button 
                        onClick={this.togglePersonHandler}>Toggle Person</button>
                </React.Fragment>
            )
        }

- by using media queries and animations you need to do:
    - import Radium, { StyleRoot } from 'radium';
    - and wrap all return satemnent into this: 
            return (
                <StyleRoot>
                    <h1>sadasd</h1>
                </StyleRoot>
            )    


- video 8 to 11 are css scope who use tweaks and I did not view the video cause I want to use radium in the future


=============================================================================================================
=============================================================================================================
===============================================Folder Four 6=================================================
=============================================================================================================


debugging
    - tips
        error messages - inspect elements and look for the first message error and its line numebrs

        logical error - you didnt get any throw error but somehow the result didnt go well
                      - this will hard to spot the cause of an error but you use the browser developer tool to fix
                            - inspect elements > Sources > localhost:3000 > projName > src > file.js
                            - find your function that you think it didn't work well
                            - click the line of function content and will have a breakpoint
                            - then try again in UI and it will automatically pause as you start test
                            - then cick on step into new function call the down arrow icon to step to the next things to do the function
                            - and analyze things right there
            
    - React developer tools
        - add this extension to your browser search 'React Developer Tool' then add then after add restart your chrome 
        - then inspect element then select react tab and click any elements then observe the props and state show at right side
        - for better you need to watch tutorial for react developer tools 

    - create some custom error
        e.g.
            const rnd = Math.random();
            if ( rnd > 0.6 ) {
                throw new Error( 'Something went wrong' );
            }
            console.log(rnd); 


    - using Error Boundaries - to catch error in react
        - is so called higher order component
        - the custom error you created will be show only in production not in development :(
        - only use this when you see error that ou can't control nice tool for production to show custom error
            

=============================================================================================================
=============================================================================================================
===============================================Folder Four 7=================================================
=============================================================================================================

- apply some file structure

- Staless vs Stateful Components
    Stateful(Containers)    
        - class XY extends Component
        - can - Access to State
        - can - Lifecycle Hooks ( e.g. componentDidMount)
        - Access State and Props via "this"
            - this.state.XY & this.props.XY
        - Use only if you need to manage state or access to Lifecycle Hooks

    Stateless 
        - const XY = (props) => {...}
        - cannot - Access to State
        - cannot - Lifecycle Hooks
        - Access Props via "props"
            - props.XY
        - Use in all other cases



- Component Lifecycle
    - only available in stateful component
    - list :
        constructor()
        componentWillReceivedProps()
        componentWillUpdate()
        componentDidCatch()
        componentWillUnmount()
        componentWillMount()
        shouldComponentUpdate()
        componentDidUpdate()
        componentDidMount()
        render()

    - creation - component lifecycle process (will run the following method in sequence:)
        - constructor()
            - Default ES6 class Feature
            - if implent the constructor you need to call super (super(props)) - super is call to a parent class and that is Component
            - you can initialize state in the constructor but it's old way create state outside is new way but both was fine
            - you can call props without in in constructor else cannot
            - the constructor will place at the top of state
            - side effect? e.g. reaching out to a web server so request which come back and edit the state of your application - bad practice
        - componentWillMount()
            - Exist for Historic Reasons
            - use to update State,
            - do some last minute optimization
            - this won't use often
            - use this to remove warning in console (UNSAFE_componentWillMount) but try to find a better way
            - side effect? e.g. reaching out to a web server so request which come back and edit the state of your application - bad practice
        - render()
            - where you prepare and structure your jsx code, dfining which content gets
            - this will render all childs component ( dont confuse that this will render all firstthechild component before componentDidMount())
        - componentDidMount()
            - this will after successufllu mounted or render
            - side effect? e.g. reaching out to a web server so request which come back and edit the state of your application - bad practice
            - Don't update state it will triggers re-render
            - don't call setState in here

    - Update - component lifecycle process (triggered by parent)
        - changing props and internally triggered updates. or by changing state
        :
        - componentWillReceiveProps(nextProps)
            - can sync local state to props, but if you don't sync then don't use this method
            - side effect? e.g. reaching out to a web server so request which come back and edit the state of your application - bad practice
        - shouldComponentUpdate(nextProps, nextState)
            - basically the props and state which triggered this update
            - this is the method which may actually cancel the updating process base in your trapping, return true to continue false to cancel and lifecycle will stop
            - carefull to use this it will broke your state or dome if you stop the cycle
            - side effect? e.g. reaching out to a web server so request which come back and edit the state of your application - bad practice
        - componentWillUpdate(nextProps, nextState)
            - may sync your state to props    
            - It might be the better place to sync your state to props rather than componentWillReceiveProps because your than cecking if you want to update or not made by shouldComponentUpdate()
        - render()
            - if successuflly through cycle
            - same function as create cycle
            - prepare & structure your JSX code
            - then update all child components props to be precise
         - componentDidUpdate() 
            - you may cause side effects just like componentDidMount
            - it is same as componentDidMount but in updating case


- You can't define method in function component

- you cannot create variable outside the render method